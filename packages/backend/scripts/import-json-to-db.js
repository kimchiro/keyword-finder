#!/usr/bin/env node

/**
 * JSON ÌååÏùºÎì§ÏùÑ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Î°ú Í∞ÄÏ†∏Ïò§Îäî Ïä§ÌÅ¨Î¶ΩÌä∏
 *
 * ÏÇ¨Ïö©Î≤ï:
 * node scripts/import-json-to-db.js
 * node scripts/import-json-to-db.js --file=specific-file.json
 * node scripts/import-json-to-db.js --query=ÎßõÏßë
 */

require("dotenv").config();
const fs = require("fs");
const path = require("path");
const mysql = require("mysql2/promise");

// Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ ÏÑ§Ï†ï
const dbConfig = {
  host: process.env.DB_HOST || process.env.MYSQL_HOST || "localhost",
  user: process.env.DB_USER || process.env.MYSQL_USER || "root",
  password: process.env.DB_PASSWORD || process.env.MYSQL_PASSWORD || "",
  database:
    process.env.DB_NAME || process.env.MYSQL_DATABASE || "keyword_finder",
  port: process.env.DB_PORT || process.env.MYSQL_PORT || 3306,
  charset: "utf8mb4",
};

/**
 * Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ ÌÖåÏä§Ìä∏
 */
async function testConnection() {
  try {
    const connection = await mysql.createConnection(dbConfig);
    console.log("‚úÖ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ ÏÑ±Í≥µ:", dbConfig.database);
    await connection.end();
    return true;
  } catch (error) {
    console.error("‚ùå Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ Ïã§Ìå®:", error.message);
    console.error("ÏÑ§Ï†ï:", { ...dbConfig, password: "***" });
    return false;
  }
}

/**
 * ÌÖåÏù¥Î∏î Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏ Î∞è ÏÉùÏÑ±
 */
async function ensureTablesExist() {
  const connection = await mysql.createConnection(dbConfig);

  try {
    // naver_keywords ÌÖåÏù¥Î∏î ÏÉùÏÑ±
    await connection.execute(`
      CREATE TABLE IF NOT EXISTS naver_keywords (
        id INT AUTO_INCREMENT PRIMARY KEY,
        query VARCHAR(100) NOT NULL,
        keyword_type VARCHAR(50) NOT NULL,
        category VARCHAR(50) DEFAULT 'ÏùºÎ∞ò',
        text VARCHAR(255) NOT NULL,
        href TEXT,
        imageAlt TEXT,
        \`rank\` INT NOT NULL,
        grp INT DEFAULT 1,
        created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        INDEX idx_query (query),
        INDEX idx_keyword_type (keyword_type),
        INDEX idx_category (category),
        INDEX idx_created_at (created_at)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
    `);

    // naver_related_keywords ÌÖåÏù¥Î∏î ÏÉùÏÑ±
    await connection.execute(`
      CREATE TABLE IF NOT EXISTS naver_related_keywords (
        id INT AUTO_INCREMENT PRIMARY KEY,
        query VARCHAR(100) NOT NULL,
        related_keyword VARCHAR(255) NOT NULL,
        monthly_pc_qc_cnt BIGINT,
        monthly_mobile_qc_cnt BIGINT,
        monthly_ave_pc_clk_cnt INT,
        monthly_ave_mobile_clk_cnt INT,
        monthly_ave_pc_ctr DECIMAL(5,2),
        monthly_ave_mobile_ctr DECIMAL(5,2),
        pl_avg_depth DECIMAL(3,1),
        comp_idx VARCHAR(10),
        created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        INDEX idx_query (query),
        INDEX idx_created_at (created_at)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
    `);

    console.log("‚úÖ ÌÖåÏù¥Î∏î ÌôïÏù∏/ÏÉùÏÑ± ÏôÑÎ£å");
  } catch (error) {
    console.error("‚ùå ÌÖåÏù¥Î∏î ÏÉùÏÑ± Ïò§Î•ò:", error.message);
    throw error;
  } finally {
    await connection.end();
  }
}

/**
 * JSON ÌååÏùºÏóêÏÑú ÌÇ§ÏõåÎìú Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú
 */
function extractKeywordsFromJson(filePath) {
  try {
    const content = fs.readFileSync(filePath, "utf8");
    const jsonData = JSON.parse(content);

    if (jsonData.success && Array.isArray(jsonData.data)) {
      return jsonData.data;
    } else if (Array.isArray(jsonData)) {
      return jsonData;
    } else {
      console.warn(`‚ö†Ô∏è ÏòàÏÉÅÌïòÏßÄ Î™ªÌïú JSON Íµ¨Ï°∞: ${filePath}`);
      return [];
    }
  } catch (error) {
    console.error(`‚ùå JSON ÌååÏùº ÏùΩÍ∏∞ Ïò§Î•ò (${filePath}):`, error.message);
    return [];
  }
}

/**
 * ÌÇ§ÏõåÎìú Îç∞Ïù¥ÌÑ∞Î•º Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê ÏÇΩÏûÖ
 */
async function insertKeywords(keywords) {
  if (!keywords || keywords.length === 0) {
    return { success: true, count: 0 };
  }

  const connection = await mysql.createConnection(dbConfig);

  try {
    // Î∞∞Ïπò ÏÇΩÏûÖÏùÑ ÏúÑÌïú ÏøºÎ¶¨ Ï§ÄÎπÑ
    const insertQuery = `
      INSERT INTO naver_keywords 
      (query, keyword_type, category, text, href, imageAlt, \`rank\`, grp, created_at)
      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
      ON DUPLICATE KEY UPDATE
      text = VALUES(text),
      href = VALUES(href),
      imageAlt = VALUES(imageAlt),
      \`rank\` = VALUES(\`rank\`),
      grp = VALUES(grp)
    `;

    let insertedCount = 0;

    for (const keyword of keywords) {
      try {
        // ISO 8601 ÎÇ†ÏßúÎ•º MySQL datetime ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
        let createdAt = keyword.created_at || new Date();
        if (typeof createdAt === "string") {
          createdAt = new Date(createdAt);
        }
        const mysqlDateTime = createdAt
          .toISOString()
          .slice(0, 19)
          .replace("T", " ");

        await connection.execute(insertQuery, [
          keyword.query || "",
          keyword.keyword_type || "unknown",
          keyword.category || "ÏùºÎ∞ò",
          keyword.text || "",
          keyword.href || null,
          keyword.imageAlt || null,
          keyword.rank || 0,
          keyword.grp || 1,
          mysqlDateTime,
        ]);
        insertedCount++;
      } catch (error) {
        console.error(`‚ùå ÌÇ§ÏõåÎìú ÏÇΩÏûÖ Ïò§Î•ò (${keyword.text}):`, error.message);
      }
    }

    console.log(`‚úÖ ${insertedCount}/${keywords.length}Í∞ú ÌÇ§ÏõåÎìú Ï†ÄÏû• ÏôÑÎ£å`);
    return { success: true, count: insertedCount };
  } catch (error) {
    console.error("‚ùå Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÇΩÏûÖ Ïò§Î•ò:", error.message);
    throw error;
  } finally {
    await connection.end();
  }
}

/**
 * Î©îÏù∏ Ïã§Ìñâ Ìï®Ïàò
 */
async function main() {
  console.log("üöÄ JSON ÌååÏùºÏùÑ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Î°ú Í∞ÄÏ†∏Ïò§Í∏∞ ÏãúÏûë...\n");

  // Î™ÖÎ†πÌñâ Ïù∏Ïûê Ï≤òÎ¶¨
  const args = process.argv.slice(2);
  const options = {};

  args.forEach((arg) => {
    if (arg.startsWith("--file=")) {
      options.file = arg.split("=")[1];
    } else if (arg.startsWith("--query=")) {
      options.query = arg.split("=")[1];
    }
  });

  // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ ÌÖåÏä§Ìä∏
  const connected = await testConnection();
  if (!connected) {
    console.error(
      "‚ùå Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Ïó∞Í≤∞Ìï† Ïàò ÏóÜÏäµÎãàÎã§. ÌôòÍ≤ΩÏÑ§Ï†ïÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî."
    );
    process.exit(1);
  }

  // ÌÖåÏù¥Î∏î ÌôïÏù∏/ÏÉùÏÑ±
  await ensureTablesExist();

  // JSON ÌååÏùºÎì§ Ï∞æÍ∏∞
  const outputDir = path.join(__dirname, "../output");
  if (!fs.existsSync(outputDir)) {
    console.error("‚ùå output ÎîîÎ†âÌÜ†Î¶¨Í∞Ä Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§:", outputDir);
    process.exit(1);
  }

  let jsonFiles = fs
    .readdirSync(outputDir)
    .filter((file) => file.endsWith(".json"))
    .map((file) => path.join(outputDir, file));

  // ÌïÑÌÑ∞ÎßÅ Ï†ÅÏö©
  if (options.file) {
    jsonFiles = jsonFiles.filter(
      (file) => path.basename(file) === options.file
    );
  }

  if (options.query) {
    jsonFiles = jsonFiles.filter((file) => file.includes(`_${options.query}_`));
  }

  if (jsonFiles.length === 0) {
    console.log("‚ö†Ô∏è Ï≤òÎ¶¨Ìï† JSON ÌååÏùºÏù¥ ÏóÜÏäµÎãàÎã§.");
    return;
  }

  console.log(`üìÅ ${jsonFiles.length}Í∞úÏùò JSON ÌååÏùºÏùÑ Ï≤òÎ¶¨Ìï©ÎãàÎã§:\n`);

  let totalProcessed = 0;
  let totalInserted = 0;

  // Í∞Å JSON ÌååÏùº Ï≤òÎ¶¨
  for (const filePath of jsonFiles) {
    const fileName = path.basename(filePath);
    console.log(`üìÑ Ï≤òÎ¶¨ Ï§ë: ${fileName}`);

    const keywords = extractKeywordsFromJson(filePath);
    if (keywords.length > 0) {
      const result = await insertKeywords(keywords);
      totalProcessed += keywords.length;
      totalInserted += result.count;

      console.log(
        `   ‚Üí ${keywords.length}Í∞ú ÌÇ§ÏõåÎìú Ï§ë ${result.count}Í∞ú Ï†ÄÏû•\n`
      );
    } else {
      console.log(`   ‚Üí ÌÇ§ÏõåÎìú Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå\n`);
    }
  }

  console.log("üéâ Í∞ÄÏ†∏Ïò§Í∏∞ ÏôÑÎ£å!");
  console.log(`üìä Ï¥ù Ï≤òÎ¶¨Îêú ÌÇ§ÏõåÎìú: ${totalProcessed}Í∞ú`);
  console.log(`üíæ Ï¥ù Ï†ÄÏû•Îêú ÌÇ§ÏõåÎìú: ${totalInserted}Í∞ú`);

  // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÌÜµÍ≥Ñ ÌôïÏù∏
  const connection = await mysql.createConnection(dbConfig);
  try {
    const [rows] = await connection.execute(`
      SELECT 
        COUNT(*) as total,
        COUNT(DISTINCT query) as unique_queries,
        COUNT(DISTINCT keyword_type) as keyword_types
      FROM naver_keywords
    `);

    console.log(`\nüìà Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÌòÑÌô©:`);
    console.log(`   Ï†ÑÏ≤¥ ÌÇ§ÏõåÎìú: ${rows[0].total}Í∞ú`);
    console.log(`   Í≥†Ïú† Í≤ÄÏÉâÏñ¥: ${rows[0].unique_queries}Í∞ú`);
    console.log(`   ÌÇ§ÏõåÎìú ÌÉÄÏûÖ: ${rows[0].keyword_types}Í∞ú`);
  } catch (error) {
    console.error("‚ùå ÌÜµÍ≥Ñ Ï°∞Ìöå Ïò§Î•ò:", error.message);
  } finally {
    await connection.end();
  }
}

// Ïä§ÌÅ¨Î¶ΩÌä∏ ÏßÅÏ†ë Ïã§Ìñâ Ïãú
if (require.main === module) {
  main().catch((error) => {
    console.error("‚ùå Ïã§Ìñâ Ïò§Î•ò:", error);
    process.exit(1);
  });
}

module.exports = { main, insertKeywords, extractKeywordsFromJson };
