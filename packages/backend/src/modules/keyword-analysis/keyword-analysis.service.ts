import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { KeywordAnalytics } from '../../database/entities/keyword-analytics.entity';
import { RelatedKeywords, SimilarityScore } from '../../database/entities/related-keywords.entity';
import { SearchTrends, PeriodType } from '../../database/entities/search-trends.entity';
import { MonthlySearchRatios } from '../../database/entities/monthly-search-ratios.entity';
import { WeekdaySearchRatios } from '../../database/entities/weekday-search-ratios.entity';
import { GenderSearchRatios } from '../../database/entities/gender-search-ratios.entity';
import { IssueAnalysis, IssueType, TrendDirection } from '../../database/entities/issue-analysis.entity';
import { IntentAnalysis, PrimaryIntent } from '../../database/entities/intent-analysis.entity';

@Injectable()
export class KeywordAnalysisService {
  constructor(
    @InjectRepository(KeywordAnalytics)
    private keywordAnalyticsRepository: Repository<KeywordAnalytics>,
    @InjectRepository(RelatedKeywords)
    private relatedKeywordsRepository: Repository<RelatedKeywords>,
    @InjectRepository(SearchTrends)
    private searchTrendsRepository: Repository<SearchTrends>,
    @InjectRepository(MonthlySearchRatios)
    private monthlySearchRatiosRepository: Repository<MonthlySearchRatios>,
    @InjectRepository(WeekdaySearchRatios)
    private weekdaySearchRatiosRepository: Repository<WeekdaySearchRatios>,
    @InjectRepository(GenderSearchRatios)
    private genderSearchRatiosRepository: Repository<GenderSearchRatios>,
    @InjectRepository(IssueAnalysis)
    private issueAnalysisRepository: Repository<IssueAnalysis>,
    @InjectRepository(IntentAnalysis)
    private intentAnalysisRepository: Repository<IntentAnalysis>,
  ) {}

  async analyzeKeyword(keyword: string, analysisDate?: string, naverApiData?: any, relatedKeywordsData?: any[]): Promise<{
    analytics: KeywordAnalytics;
    relatedKeywords: RelatedKeywords[];
    chartData: {
      searchTrends: SearchTrends[];
      monthlyRatios: MonthlySearchRatios[];
      weekdayRatios: WeekdaySearchRatios[];
      genderRatios: GenderSearchRatios;
      issueAnalysis: IssueAnalysis;
      intentAnalysis: IntentAnalysis;
    };
  }> {
    console.log(`üìä ÌÇ§ÏõåÎìú Î∂ÑÏÑù ÏãúÏûë: ${keyword}`);

    try {
      // Check if analysis for this keyword and date already exists
      const targetDateString = analysisDate || new Date().toISOString().split('T')[0];
      const targetDate = new Date(targetDateString);
      const existingAnalytics = await this.keywordAnalyticsRepository.findOne({
        where: { keyword, analysisDate: targetDate },
      });

      if (existingAnalytics) {
        console.log(`‚ö†Ô∏è ÌÇ§ÏõåÎìú '${keyword}'Ïóê ÎåÄÌïú Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞Í∞Ä Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï©ÎãàÎã§. Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞Î•º Î∞òÌôòÌï©ÎãàÎã§.`);
        const existingData = await this.getKeywordAnalysis(keyword);
        return existingData.data;
      }

      const currentDate = analysisDate ? new Date(analysisDate) : new Date();
      
      // 1. Í∏∞Î≥∏ ÌÇ§ÏõåÎìú Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• (Ïô∏Î∂ÄÏóêÏÑú Ï†ÑÎã¨Î∞õÏùÄ ÎÑ§Ïù¥Î≤Ñ API Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©)
      const analyticsData = await this.generateAndSaveKeywordAnalytics(keyword, currentDate, naverApiData);
      
      // 2. Ïó∞Í¥Ä ÌÇ§ÏõåÎìú Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• (Ïô∏Î∂ÄÏóêÏÑú Ï†ÑÎã¨Î∞õÏùÄ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©)
      const relatedKeywords = relatedKeywordsData && relatedKeywordsData.length > 0 
        ? await this.saveRelatedKeywords(keyword, relatedKeywordsData, currentDate)
        : [];
      
      // 3. Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• (Ïô∏Î∂ÄÏóêÏÑú Ï†ÑÎã¨Î∞õÏùÄ ÎÑ§Ïù¥Î≤Ñ Îç∞Ïù¥ÌÑ∞Îû© Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©)
      const chartData = await this.generateAndSaveChartData(keyword, currentDate, naverApiData);

      console.log(`‚úÖ ÌÇ§ÏõåÎìú Î∂ÑÏÑù ÏôÑÎ£å: ${keyword}`);

      return {
        analytics: analyticsData,
        relatedKeywords: relatedKeywords,
        chartData: chartData,
      };
    } catch (error) {
      console.error('‚ùå KeywordAnalysisService.analyzeKeyword Ïò§Î•ò:', error);
      throw error;
    }
  }

  async getKeywordAnalysis(keyword: string) {
    console.log(`üìä ÌÇ§ÏõåÎìú Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå: ${keyword}`);

    try {
      // ÏµúÏã† Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
      const analytics = await this.keywordAnalyticsRepository.findOne({
        where: { keyword },
        order: { analysisDate: 'DESC' },
      });

      if (!analytics) {
        return {
          success: false,
          data: { analytics: null, relatedKeywords: [], chartData: null },
        };
      }

      // Ïó∞Í¥Ä ÌÇ§ÏõåÎìú Ï°∞Ìöå
      const relatedKeywords = await this.relatedKeywordsRepository.find({
        where: { baseKeyword: keyword, analysisDate: analytics.analysisDate },
        order: { rankPosition: 'ASC' },
      });

      // Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
      const chartData = await this.getAllChartData(keyword, analytics.analysisDate);

      return {
        success: true,
        data: {
          analytics,
          relatedKeywords,
          chartData,
        },
      };
    } catch (error) {
      console.error('‚ùå KeywordAnalysisService.getKeywordAnalysis Ïò§Î•ò:', error);
      throw error;
    }
  }

  async getAnalyzedKeywords() {
    try {
      const keywords = await this.keywordAnalyticsRepository
        .createQueryBuilder('analytics')
        .select(['analytics.keyword', 'MAX(analytics.analysisDate) as latestDate'])
        .groupBy('analytics.keyword')
        .orderBy('latestDate', 'DESC')
        .getRawMany();

      return keywords;
    } catch (error) {
      console.error('‚ùå KeywordAnalysisService.getAnalyzedKeywords Ïò§Î•ò:', error);
      throw error;
    }
  }

  private async generateAndSaveKeywordAnalytics(keyword: string, analysisDate: Date, naverApiData?: any) {
    // ÎÑ§Ïù¥Î≤Ñ API ÏõêÎ≥∏ Îç∞Ïù¥ÌÑ∞Îßå ÏÇ¨Ïö©, Í≥ÑÏÇ∞ Î°úÏßÅ Ï†úÍ±∞
    const analyticsData = {
      keyword,
      // ÎÑ§Ïù¥Î≤Ñ Îç∞Ïù¥ÌÑ∞Îû© ÏõêÎ≥∏ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö© (ratio Í∞í Í∑∏ÎåÄÎ°ú)
      monthlySearchPc: naverApiData?.datalab?.results?.[0]?.data?.[0]?.ratio || 0,
      monthlySearchMobile: naverApiData?.datalab?.results?.[0]?.data?.[1]?.ratio || 0,
      monthlySearchTotal: naverApiData?.datalab?.results?.[0]?.data?.reduce((sum: number, item: any) => sum + item.ratio, 0) || 0,
      // ÎÑ§Ïù¥Î≤Ñ Î∏îÎ°úÍ∑∏ Í≤ÄÏÉâ ÏõêÎ≥∏ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©
      monthlyContentBlog: naverApiData?.blogSearch?.total || 0,
      monthlyContentCafe: 0, // Ïπ¥Ìéò Í≤ÄÏÉâ APIÍ∞Ä ÏóÜÏúºÎØÄÎ°ú 0
      monthlyContentAll: naverApiData?.blogSearch?.total || 0,
      // Ï∂îÏ†ï Îç∞Ïù¥ÌÑ∞ Ï†úÍ±∞, ÏõêÎ≥∏ Îç∞Ïù¥ÌÑ∞Îßå ÏÇ¨Ïö©
      estimatedSearchYesterday: 0,
      estimatedSearchEndMonth: 0,
      saturationIndexBlog: 0,
      saturationIndexCafe: 0,
      saturationIndexAll: 0,
      analysisDate,
    };

    try {
        // UPSERT: INSERT ... ON DUPLICATE KEY UPDATE Î∞©ÏãùÏúºÎ°ú Ï§ëÎ≥µ Ï≤òÎ¶¨
        const result = await this.keywordAnalyticsRepository
          .createQueryBuilder()
          .insert()
          .into(KeywordAnalytics)
          .values(analyticsData)
          .orUpdate(['monthly_search_pc', 'monthly_search_mobile', 'monthly_search_total', 
                    'monthly_content_blog', 'monthly_content_cafe', 'monthly_content_all',
                    'estimated_search_yesterday', 'estimated_search_end_month',
                    'saturation_index_blog', 'saturation_index_cafe', 'saturation_index_all',
                    'updated_at'], ['keyword', 'analysis_date'])
          .execute();

      // Ï†ÄÏû•Îêú Îç∞Ïù¥ÌÑ∞ Ï°∞ÌöåÌïòÏó¨ Î∞òÌôò
      return await this.keywordAnalyticsRepository.findOne({
        where: { keyword, analysisDate }
      });
    } catch (error) {
      console.error('‚ùå generateAndSaveKeywordAnalytics Ïò§Î•ò:', error);
      // Ï§ëÎ≥µ ÌÇ§ ÏóêÎü¨Ïù∏ Í≤ΩÏö∞ Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ Ï°∞ÌöåÌïòÏó¨ Î∞òÌôò
      if (error.code === 'ER_DUP_ENTRY') {
        console.log(`‚ö†Ô∏è Ï§ëÎ≥µ ÌÇ§ ÏóêÎü¨ Î∞úÏÉù, Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå: ${keyword}`);
        return await this.keywordAnalyticsRepository.findOne({
          where: { keyword, analysisDate }
        });
      }
      throw error;
    }
  }

  async saveRelatedKeywords(keyword: string, relatedKeywordsData: any[], analysisDate: Date) {
    try {
      // Í∏∞Ï°¥ Ïó∞Í¥Ä ÌÇ§ÏõåÎìú Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú (Ï§ëÎ≥µ Î∞©ÏßÄ)
      await this.relatedKeywordsRepository.delete({
        baseKeyword: keyword,
        analysisDate,
      });

      // Ïô∏Î∂ÄÏóêÏÑú Ï†ÑÎã¨Î∞õÏùÄ Ïó∞Í¥Ä ÌÇ§ÏõåÎìú Îç∞Ïù¥ÌÑ∞Î•º Ï†ÄÏû• (Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±ÌïòÏßÄ ÏïäÏùå)
      const relatedKeywords = relatedKeywordsData.map((item, index) => ({
        baseKeyword: keyword,
        relatedKeyword: item.keyword,
        monthlySearchVolume: item.monthlySearchVolume || 0,
        blogCumulativePosts: 0, // Î∏îÎ°úÍ∑∏ ÎàÑÏ†Å Í≤åÏãúÎ¨º ÏàòÎäî Î≥ÑÎèÑ API ÌïÑÏöî
        similarityScore: SimilarityScore.MEDIUM,
        rankPosition: index + 1,
        analysisDate,
      }));
      
      return await this.relatedKeywordsRepository.save(relatedKeywords);
    } catch (error) {
      console.error('‚ùå saveRelatedKeywords Ïò§Î•ò:', error);
      throw error;
    }
  }

  private async generateAndSaveChartData(keyword: string, analysisDate: Date, naverApiData?: any) {
    const currentYear = new Date().getFullYear();
    
    try {
      // Í∏∞Ï°¥ Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú (Ï§ëÎ≥µ Î∞©ÏßÄ)
      await Promise.all([
        this.searchTrendsRepository.delete({ keyword }),
        this.monthlySearchRatiosRepository.delete({ keyword, analysisYear: currentYear }),
        this.weekdaySearchRatiosRepository.delete({ keyword, analysisDate }),
        this.genderSearchRatiosRepository.delete({ keyword, analysisDate }),
        this.issueAnalysisRepository.delete({ keyword, analysisDate }),
        this.intentAnalysisRepository.delete({ keyword, analysisDate }),
      ]);

      // Í≤ÄÏÉâÎüâ Ìä∏Î†åÎìú Îç∞Ïù¥ÌÑ∞ (ÎÑ§Ïù¥Î≤Ñ Îç∞Ïù¥ÌÑ∞Îû© ÏõêÎ≥∏ Îç∞Ïù¥ÌÑ∞Îßå ÏÇ¨Ïö©)
      const searchTrends = [];
      if (naverApiData?.datalab?.results?.[0]?.data) {
        // ÎÑ§Ïù¥Î≤Ñ Îç∞Ïù¥ÌÑ∞Îû© ÏõêÎ≥∏ Îç∞Ïù¥ÌÑ∞ Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©
        const datalabData = naverApiData.datalab.results[0].data;
        for (const dataPoint of datalabData) {
          const trend = this.searchTrendsRepository.create({
            keyword,
            periodType: PeriodType.MONTHLY,
            periodValue: dataPoint.period,
            searchVolume: dataPoint.ratio, // ÏõêÎ≥∏ ratio Í∞í Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©
            searchRatio: dataPoint.ratio,
          });
          searchTrends.push(trend);
        }
        await this.searchTrendsRepository.save(searchTrends);
      }

      // ÏõîÎ≥Ñ Í≤ÄÏÉâ ÎπÑÏú® Îç∞Ïù¥ÌÑ∞ (ÎÑ§Ïù¥Î≤Ñ Îç∞Ïù¥ÌÑ∞Îû© ÏõêÎ≥∏ Îç∞Ïù¥ÌÑ∞Îßå ÏÇ¨Ïö©)
      const monthlyRatios = [];
      if (naverApiData?.datalab?.results?.[0]?.data) {
        const datalabData = naverApiData.datalab.results[0].data;
        datalabData.forEach((dataPoint, index) => {
          const monthMatch = dataPoint.period.match(/-(\d{2})-/);
          const monthNumber = monthMatch ? parseInt(monthMatch[1]) : index + 1;
          
          const ratio = this.monthlySearchRatiosRepository.create({
            keyword,
            monthNumber,
            searchRatio: dataPoint.ratio, // ÏõêÎ≥∏ ratio Í∞í Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©
            analysisYear: currentYear,
          });
          monthlyRatios.push(ratio);
        });
        await this.monthlySearchRatiosRepository.save(monthlyRatios);
      }

      // ÏöîÏùºÎ≥Ñ, ÏÑ±Î≥Ñ, Ïù¥ÏäàÏÑ±, ÏùòÎèÑ Î∂ÑÏÑùÏùÄ ÎÑ§Ïù¥Î≤Ñ APIÏóêÏÑú Ï†úÍ≥µÌïòÏßÄ ÏïäÏúºÎØÄÎ°ú 
      // Í≥ÑÏÇ∞ Î°úÏßÅ Ï†úÍ±∞ÌïòÍ≥† Îπà Îç∞Ïù¥ÌÑ∞Î°ú Ï≤òÎ¶¨
      const weekdayRatios: WeekdaySearchRatios[] = [];
      let genderRatio: GenderSearchRatios | null = null;
      let issueAnalysis: IssueAnalysis | null = null;
      let intentAnalysis: IntentAnalysis | null = null;

      return {
        searchTrends,
        monthlyRatios,
        weekdayRatios,
        genderRatios: genderRatio,
        issueAnalysis,
        intentAnalysis,
      };
    } catch (error) {
      console.error('‚ùå generateAndSaveChartData Ïò§Î•ò:', error);
      throw error;
    }
  }

  private async getAllChartData(keyword: string, analysisDate: Date) {
    const [
      searchTrends,
      monthlyRatios,
      weekdayRatios,
      genderRatios,
      issueAnalysis,
      intentAnalysis,
    ] = await Promise.all([
      this.searchTrendsRepository.find({
        where: { keyword, periodType: PeriodType.MONTHLY },
        order: { periodValue: 'ASC' },
        take: 12,
      }),
      this.monthlySearchRatiosRepository.find({
        where: { keyword },
        order: { monthNumber: 'ASC' },
      }),
      this.weekdaySearchRatiosRepository.find({
        where: { keyword, analysisDate },
        order: { weekdayNumber: 'ASC' },
      }),
      this.genderSearchRatiosRepository.findOne({
        where: { keyword, analysisDate },
      }),
      this.issueAnalysisRepository.findOne({
        where: { keyword, analysisDate },
      }),
      this.intentAnalysisRepository.findOne({
        where: { keyword, analysisDate },
      }),
    ]);

    return {
      searchTrends,
      monthlyRatios,
      weekdayRatios,
      genderRatios,
      issueAnalysis,
      intentAnalysis,
    };
  }
}
