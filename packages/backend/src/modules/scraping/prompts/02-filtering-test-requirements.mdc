# 키워드 스크래핑 필터링 테스트 요구사항

## 테스트 대상 파일
- `src/modules/scraping/scraper/naver-scraper.ts`
- `src/constants/scraping.constants.ts`
- 테스트 파일: `src/modules/scraping/scraper/naver-scraper.spec.ts`

## 1. 단위 테스트 (Unit Tests)

### 1.1 `isValidKeyword()` 메서드 테스트

#### ✅ **성공 조건 (MUST PASS)**
```typescript
describe('isValidKeyword - 성공 케이스', () => {
  // 정상적인 키워드들
  expect(isValidKeyword('다크초콜릿', '초콜릿')).toBe(true);
  expect(isValidKeyword('밀크초콜릿', '초콜릿')).toBe(true);
  expect(isValidKeyword('강남맛집', '맛집')).toBe(true);
  expect(isValidKeyword('이태원 맛집', '맛집')).toBe(true);
  expect(isValidKeyword('Korean Food', 'food')).toBe(true);
  expect(isValidKeyword('맛집추천', '맛집')).toBe(true);
  expect(isValidKeyword('초콜릿케이크', '초콜릿')).toBe(true);
  expect(isValidKeyword('맛집-리스트', '맛집')).toBe(true);
  expect(isValidKeyword('맛집_추천', '맛집')).toBe(true);
});
```

#### ❌ **실패 조건 (MUST FAIL)**
```typescript
describe('isValidKeyword - 실패 케이스', () => {
  // 1. 길이 제한 위반
  expect(isValidKeyword('a', '초콜릿')).toBe(false); // 1글자
  expect(isValidKeyword('매우매우매우매우매우매우매우매우매우매우매우매우매우긴키워드입니다', '초콜릿')).toBe(false); // 30글자 초과
  
  // 2. 블랙리스트 키워드
  expect(isValidKeyword('광고', '초콜릿')).toBe(false);
  expect(isValidKeyword('네이버', '초콜릿')).toBe(false);
  expect(isValidKeyword('등록 안내', '초콜릿')).toBe(false);
  expect(isValidKeyword('도움말', '초콜릿')).toBe(false);
  expect(isValidKeyword('서비스', '초콜릿')).toBe(false);
  expect(isValidKeyword('더보기', '초콜릿')).toBe(false);
  expect(isValidKeyword('필터', '초콜릿')).toBe(false);
  expect(isValidKeyword('정렬', '초콜릿')).toBe(false);
  expect(isValidKeyword('확인', '초콜릿')).toBe(false);
  expect(isValidKeyword('취소', '초콜릿')).toBe(false);
  expect(isValidKeyword('Naver', '초콜릿')).toBe(false);
  expect(isValidKeyword('NAVER', '초콜릿')).toBe(false);
  expect(isValidKeyword('네이버페이', '초콜릿')).toBe(false);
  expect(isValidKeyword('할인', '초콜릿')).toBe(false);
  expect(isValidKeyword('세일', '초콜릿')).toBe(false);
  expect(isValidKeyword('쿠폰', '초콜릿')).toBe(false);
  expect(isValidKeyword('장바구니', '초콜릿')).toBe(false);
  
  // 3. 특수문자 포함 (허용되지 않는)
  expect(isValidKeyword('초콜릿@맛집', '초콜릿')).toBe(false);
  expect(isValidKeyword('맛집#추천', '맛집')).toBe(false);
  expect(isValidKeyword('초콜릿$세일', '초콜릿')).toBe(false);
  expect(isValidKeyword('맛집%할인', '맛집')).toBe(false);
  
  // 4. URL/링크 텍스트
  expect(isValidKeyword('http://example.com', '초콜릿')).toBe(false);
  expect(isValidKeyword('www.naver.com', '초콜릿')).toBe(false);
  expect(isValidKeyword('맛집.com', '맛집')).toBe(false);
  expect(isValidKeyword('초콜릿.kr', '초콜릿')).toBe(false);
  
  // 5. 원본 쿼리와 동일
  expect(isValidKeyword('초콜릿', '초콜릿')).toBe(false);
  expect(isValidKeyword('맛집', '맛집')).toBe(false);
  
  // 6. 빈 문자열
  expect(isValidKeyword('', '초콜릿')).toBe(false);
  expect(isValidKeyword('   ', '초콜릿')).toBe(false);
  
  // 7. 90% 이상 유사도
  expect(isValidKeyword('초콜릿맛', '초콜릿')).toBe(false); // 매우 유사
});
```

### 1.2 `isBlacklistedKeyword()` 메서드 테스트

#### ✅ **성공 조건**
```typescript
describe('isBlacklistedKeyword - 정상 키워드', () => {
  expect(isBlacklistedKeyword('다크초콜릿')).toBe(false);
  expect(isBlacklistedKeyword('맛집추천')).toBe(false);
  expect(isBlacklistedKeyword('Korean Food')).toBe(false);
});
```

#### ❌ **실패 조건**
```typescript
describe('isBlacklistedKeyword - 블랙리스트 키워드', () => {
  // 정확 일치
  expect(isBlacklistedKeyword('광고')).toBe(true);
  expect(isBlacklistedKeyword('네이버')).toBe(true);
  
  // 대소문자 구분 없음
  expect(isBlacklistedKeyword('NAVER')).toBe(true);
  expect(isBlacklistedKeyword('naver')).toBe(true);
  
  // 포함 관계
  expect(isBlacklistedKeyword('이 광고가 표시된 이유')).toBe(true);
  expect(isBlacklistedKeyword('네이버 서비스')).toBe(true);
  expect(isBlacklistedKeyword('할인 이벤트')).toBe(true);
});
```

### 1.3 `calculateSimilarityScore()` 메서드 테스트

#### ✅ **성공 조건**
```typescript
describe('calculateSimilarityScore - 정확한 점수 계산', () => {
  expect(calculateSimilarityScore('초콜릿', '다크초콜릿')).toBeLessThan(0.9);
  expect(calculateSimilarityScore('맛집', '강남맛집')).toBeLessThan(0.9);
  expect(calculateSimilarityScore('food', 'Korean food')).toBeLessThan(0.9);
});
```

#### ❌ **실패 조건**
```typescript
describe('calculateSimilarityScore - 높은 유사도', () => {
  expect(calculateSimilarityScore('초콜릿', '초콜릿맛')).toBeGreaterThanOrEqual(0.9);
  expect(calculateSimilarityScore('맛집', '맛집들')).toBeGreaterThanOrEqual(0.9);
});
```

## 2. 통합 테스트 (Integration Tests)

### 2.1 `scrapeSmartBlockData()` 메서드 테스트

#### ✅ **성공 조건**
```typescript
describe('scrapeSmartBlockData - 필터링 적용', () => {
  it('화이트리스트 선택자만 사용해야 함', async () => {
    const mockPage = createMockPage();
    const scraper = new NaverScraper(mockBrowserPool);
    
    // 허용된 선택자들만 호출되었는지 확인
    expect(mockPage.locator).toHaveBeenCalledWith(
      '.api_subject_bx, ._related_box, .sds-comps-vertical-layout.sds-comps-full-layout.fds-collection-root, .sds-comps-base-layout.sds-comps-inline-layout.fds-collection-root.QvXp8DhecF_dQ1pJ4MCf.gbHVDHMRi7To6vgU0dML'
    );
    
    // 금지된 선택자들이 사용되지 않았는지 확인
    expect(mockPage.locator).not.toHaveBeenCalledWith(expect.stringContaining('.knowledge_box'));
    expect(mockPage.locator).not.toHaveBeenCalledWith(expect.stringContaining('.info_group'));
  });
  
  it('필터링된 키워드만 반환해야 함', async () => {
    const mockKeywords = [
      '다크초콜릿', '밀크초콜릿', // 유효한 키워드
      '광고', '네이버', '등록 안내', // 블랙리스트 키워드
      'a', '매우매우매우매우매우매우매우매우매우매우매우매우매우긴키워드', // 길이 위반
      'http://example.com', // URL
    ];
    
    const result = await scraper.scrapeSmartBlockData('초콜릿');
    
    // 유효한 키워드만 포함되어야 함
    expect(result.map(k => k.keyword)).toEqual(['다크초콜릿', '밀크초콜릿']);
    expect(result.length).toBe(2);
  });
});
```

### 2.2 전체 스크래핑 테스트

#### ✅ **성공 조건**
```typescript
describe('전체 스크래핑 필터링 테스트', () => {
  const testCases = [
    {
      query: '초콜릿',
      expectedKeywords: ['다크초콜릿', '밀크초콜릿', '초콜릿케이크'],
      forbiddenKeywords: ['광고', '네이버', '할인', '쿠폰']
    },
    {
      query: '맛집',
      expectedKeywords: ['강남맛집', '이태원맛집', '맛집추천'],
      forbiddenKeywords: ['서비스', '등록', '필터', '정렬']
    }
  ];
  
  testCases.forEach(({ query, expectedKeywords, forbiddenKeywords }) => {
    it(`${query} 검색 시 올바른 필터링이 적용되어야 함`, async () => {
      const result = await scraper.scrapeAllKeywords(query);
      const resultKeywords = result.map(k => k.keyword);
      
      // 예상 키워드들이 포함되어야 함
      expectedKeywords.forEach(keyword => {
        expect(resultKeywords).toContain(keyword);
      });
      
      // 금지된 키워드들이 포함되지 않아야 함
      forbiddenKeywords.forEach(keyword => {
        expect(resultKeywords).not.toContain(keyword);
      });
      
      // 모든 키워드가 유효성 검사를 통과해야 함
      result.forEach(keyword => {
        expect(keyword.keyword.length).toBeGreaterThanOrEqual(2);
        expect(keyword.keyword.length).toBeLessThanOrEqual(30);
        expect(keyword.keyword).toMatch(/^[가-힣a-zA-Z0-9\s\-_]+$/);
      });
    });
  });
});
```

## 3. 성능 테스트

#### ✅ **성공 조건**
```typescript
describe('성능 테스트', () => {
  it('필터링 로직이 성능에 큰 영향을 주지 않아야 함', async () => {
    const startTime = Date.now();
    const result = await scraper.scrapeAllKeywords('테스트');
    const endTime = Date.now();
    
    expect(endTime - startTime).toBeLessThan(10000); // 10초 이내
    expect(result.length).toBeGreaterThan(0); // 결과가 있어야 함
  });
});
```

## 4. 엣지 케이스 테스트

#### ✅ **성공 조건**
```typescript
describe('엣지 케이스', () => {
  it('특수 문자가 포함된 쿼리 처리', async () => {
    const result = await scraper.scrapeAllKeywords('초콜릿-케이크');
    expect(result).toBeDefined();
    expect(Array.isArray(result)).toBe(true);
  });
  
  it('빈 결과 처리', async () => {
    const result = await scraper.scrapeAllKeywords('존재하지않는키워드12345');
    expect(result).toBeDefined();
    expect(Array.isArray(result)).toBe(true);
  });
  
  it('네트워크 오류 시 빈 배열 반환', async () => {
    // 네트워크 오류 시뮬레이션
    const result = await scraper.scrapeAllKeywords('테스트');
    expect(Array.isArray(result)).toBe(true);
  });
});
```

## 5. 테스트 실행 기준

### **전체 테스트 통과 조건**
- ✅ 모든 단위 테스트 100% 통과
- ✅ 통합 테스트 100% 통과
- ✅ 성능 테스트 통과 (10초 이내)
- ✅ 엣지 케이스 테스트 통과
- ✅ 코드 커버리지 90% 이상

### **테스트 실패 시 수정 필요 사항**
- ❌ 블랙리스트 키워드가 결과에 포함된 경우
- ❌ 화이트리스트 선택자 외의 선택자 사용
- ❌ 길이 제한을 위반한 키워드 포함
- ❌ 특수문자(허용되지 않는) 포함 키워드
- ❌ URL/링크 텍스트 포함
- ❌ 90% 이상 유사한 키워드 포함

## 6. 모킹 요구사항

### **Mock 데이터 구조**
```typescript
const mockScrapingData = {
  validKeywords: [
    '다크초콜릿', '밀크초콜릿', '초콜릿케이크',
    '강남맛집', '이태원맛집', '맛집추천'
  ],
  invalidKeywords: [
    '광고', '네이버', '등록 안내', '도움말',
    'a', '매우매우매우매우매우매우매우매우매우매우매우매우매우긴키워드',
    'http://example.com', '초콜릿@특가'
  ]
};
```

이 테스트 요구사항에 따라 엄격한 테스트 코드를 작성하여 필터링 로직의 정확성을 보장해야 합니다.