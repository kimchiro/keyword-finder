# 네이버 스크래핑 개선 요구사항

## 🔍 현재 문제점 분석

### 1. 인기주제 키워드 수집 실패
- **문제**: `net::ERR_ABORTED` 오류로 페이지 로딩 실패
- **원인**: 네이버 검색 결과에 인기주제 섹션이 존재하지 않는 키워드
- **현상**: "초콜릿", "맛집" 키워드 검색 시 인기주제 영역 부재

### 2. 스마트블록 데이터 수집 실패  
- **문제**: 동일한 `net::ERR_ABORTED` 오류
- **원인**: 해당 키워드에 대한 스마트블록 컨텐츠 부재
- **현상**: 스마트블록 영역이 화면에 표시되지 않음

### 3. 연관검색어는 정상 동작
- **성공**: 연관검색어는 정상적으로 2개씩 수집됨
- **데이터**: "특별한 추석", "장소 기록을 높이 삽니다" 등

## 🎯 개선 요구사항

### A. 예외 처리 강화

#### 1. 요소 존재 여부 사전 확인
```typescript
// 개선 전: 무조건 스크래핑 시도
await this.page.goto(searchUrl);
const elements = await this.page.$$(selector);

// 개선 후: 요소 존재 확인 후 처리
await this.page.goto(searchUrl);
const hasSmartBlock = await this.page.$('.smartblock_area') !== null;
if (!hasSmartBlock) {
  console.log('⚠️ 스마트블록 영역이 존재하지 않습니다');
  return { keywords: [], message: '스마트블록 데이터가 존재하지 않습니다' };
}
```

#### 2. 구체적인 메시지 반환
- **스마트블록 부재**: "해당 키워드에 대한 스마트블록 데이터가 존재하지 않습니다"
- **인기주제 부재**: "해당 키워드에 대한 인기주제 데이터가 존재하지 않습니다"
- **함께찾는키워드 부재**: "해당 키워드에 대한 함께찾는키워드가 존재하지 않습니다"

### B. 연관검색어 수집 확장

#### 1. 2페이지 검색 로직 추가
```typescript
// 1페이지에서 연관검색어 수집
let relatedKeywords = await this.scrapeRelatedFromPage(1);

// 1페이지에서 충분하지 않으면 2페이지 이동
if (relatedKeywords.length < maxResults) {
  console.log('🔄 연관검색어 추가 수집을 위해 2페이지로 이동');
  const page2Keywords = await this.scrapeRelatedFromPage(2);
  relatedKeywords = [...relatedKeywords, ...page2Keywords];
}
```

#### 2. 페이지네이션 처리
- 2페이지 URL: `https://search.naver.com/search.naver?query=${query}&start=10`
- 페이지별 최대 수집량 제한
- 중복 키워드 제거 로직 강화

## 🛠️ 구현 방안

### 1. 스마트블록 개선
```typescript
async scrapeSmartBlockData(query: string): Promise<ScrapingResult> {
  try {
    await this.page.goto(searchUrl);
    
    // 스마트블록 영역 존재 확인
    const smartBlockExists = await this.page.$('.api_subject_bx, .smartblock, .knowledge_box') !== null;
    
    if (!smartBlockExists) {
      return {
        keywords: [],
        message: `"${query}" 키워드에 대한 스마트블록 데이터가 존재하지 않습니다`,
        status: 'no_content'
      };
    }
    
    // 기존 스크래핑 로직 실행
    // ...
  } catch (error) {
    return {
      keywords: [],
      message: `스마트블록 수집 중 오류 발생: ${error.message}`,
      status: 'error'
    };
  }
}
```

### 2. 인기주제 개선
```typescript
async scrapeTrendingKeywords(query: string): Promise<ScrapingResult> {
  try {
    await this.page.goto(searchUrl);
    
    // 인기주제 영역 존재 확인
    const trendingExists = await this.page.$('.trend_keyword, .popular_keyword, .issue_keyword') !== null;
    
    if (!trendingExists) {
      return {
        keywords: [],
        message: `"${query}" 키워드에 대한 인기주제 데이터가 존재하지 않습니다`,
        status: 'no_content'
      };
    }
    
    // 기존 스크래핑 로직 실행
    // ...
  } catch (error) {
    return {
      keywords: [],
      message: `인기주제 수집 중 오류 발생: ${error.message}`,
      status: 'error'
    };
  }
}
```

### 3. 연관검색어 2페이지 확장
```typescript
async scrapeRelatedSearchKeywords(query: string, maxResults: number = 10): Promise<ScrapingResult> {
  const allKeywords: ScrapedKeyword[] = [];
  
  // 1페이지 수집
  const page1Results = await this.scrapeRelatedFromPage(query, 1);
  allKeywords.push(...page1Results.keywords);
  
  // 2페이지 수집 (1페이지에서 부족한 경우)
  if (allKeywords.length < maxResults && allKeywords.length > 0) {
    console.log('🔄 연관검색어 추가 수집을 위해 2페이지로 이동');
    const page2Results = await this.scrapeRelatedFromPage(query, 2);
    allKeywords.push(...page2Results.keywords);
  }
  
  return {
    keywords: allKeywords.slice(0, maxResults),
    message: `연관검색어 ${allKeywords.length}개 수집 완료 (1-2페이지)`,
    status: 'success'
  };
}

private async scrapeRelatedFromPage(query: string, page: number): Promise<ScrapingResult> {
  const start = (page - 1) * 10;
  const searchUrl = `https://search.naver.com/search.naver?query=${encodeURIComponent(query)}&start=${start}`;
  
  await this.page.goto(searchUrl);
  // 연관검색어 수집 로직
  // ...
}
```

## 📊 응답 구조 개선

### 기존 응답
```json
{
  "success": true,
  "data": {
    "keywords": [...],
    "totalKeywords": 2
  }
}
```

### 개선된 응답
```json
{
  "success": true,
  "data": {
    "keywords": [...],
    "totalKeywords": 2,
    "collectionDetails": {
      "trending": {
        "status": "no_content",
        "message": "해당 키워드에 대한 인기주제 데이터가 존재하지 않습니다",
        "count": 0
      },
      "smartblock": {
        "status": "no_content", 
        "message": "해당 키워드에 대한 스마트블록 데이터가 존재하지 않습니다",
        "count": 0
      },
      "related_search": {
        "status": "success",
        "message": "연관검색어 2개 수집 완료 (1-2페이지)",
        "count": 2,
        "pages": [1, 2]
      }
    }
  }
}
```

## 🔧 구현 우선순위

### Phase 1: 예외 처리 강화
1. 요소 존재 여부 사전 확인 로직 추가
2. 구체적인 메시지 반환 구조 개선
3. 에러 핸들링 세분화

### Phase 2: 연관검색어 확장
1. 2페이지 스크래핑 로직 구현
2. 페이지네이션 처리
3. 중복 제거 로직 강화

### Phase 3: 모니터링 개선
1. 수집 상태별 통계 추가
2. 실패 원인별 분류
3. 알림 시스템 구축

## 🎯 기대 효과

1. **안정성 향상**: 예외 상황에서도 안정적인 서비스 제공
2. **정보 투명성**: 사용자에게 명확한 상태 정보 제공  
3. **수집률 향상**: 2페이지 확장으로 연관검색어 수집량 증가
4. **사용자 경험**: 실패 원인을 명확히 알 수 있어 대안 검색 가능

## 📝 테스트 케이스

### 1. 스마트블록 부재 테스트
- 키워드: "ㅁㄴㅇㄹ123" (존재하지 않는 키워드)
- 예상 결과: no_content 상태와 명확한 메시지

### 2. 인기주제 부재 테스트  
- 키워드: "초콜릿", "맛집" 
- 예상 결과: no_content 상태와 명확한 메시지

### 3. 연관검색어 2페이지 테스트
- 키워드: "맛집" (연관검색어가 많은 키워드)
- 예상 결과: 1-2페이지에서 수집된 키워드 목록

### 4. 전체 실패 테스트
- 키워드: "ㅁㄴㅇㄹ" (모든 영역에서 데이터 없음)
- 예상 결과: 각 영역별 no_content 상태 메시지