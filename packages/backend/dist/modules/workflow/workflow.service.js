"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkflowService = void 0;
const common_1 = require("@nestjs/common");
const naver_api_service_1 = require("../naver-api/naver-api.service");
const scraping_service_1 = require("../scraping/scraping.service");
const keyword_analysis_service_1 = require("../keyword-analysis/keyword-analysis.service");
const app_config_1 = require("../../config/app.config");
let WorkflowService = class WorkflowService {
    constructor(naverApiService, scrapingService, keywordAnalysisService, appConfig) {
        this.naverApiService = naverApiService;
        this.scrapingService = scrapingService;
        this.keywordAnalysisService = keywordAnalysisService;
        this.appConfig = appConfig;
    }
    async executeCompleteWorkflow(query) {
        const startTime = Date.now();
        console.log(`üöÄ ÏÉàÎ°úÏö¥ ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÏãúÏûë: ${query}`);
        try {
            console.log(`üï∑Ô∏è Phase 1: Ïä§ÌÅ¨ÎûòÌïë Ïã§Ìñâ`);
            const scrapingResult = await this.scrapingService.scrapeKeywords({
                query,
                types: ['smartblock', 'related_search'],
                maxResults: this.appConfig.scrapingMaxResults,
            });
            if (!scrapingResult || !scrapingResult.keywords) {
                throw new Error('Ïä§ÌÅ¨ÎûòÌïë Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.');
            }
            console.log(`‚úÖ Ïä§ÌÅ¨ÎûòÌïë ÏôÑÎ£å: ${scrapingResult.keywords.length}Í∞ú ÌÇ§ÏõåÎìú`);
            console.log(`üíæ Phase 2: Ïä§ÌÅ¨ÎûòÌïë Îç∞Ïù¥ÌÑ∞ DB Ï†ÄÏû•`);
            await this.keywordAnalysisService.saveScrapingData(query, scrapingResult);
            console.log(`üîç Phase 3: DBÏóêÏÑú ÏÉÅÏúÑ 5Í∞ú ÌÇ§ÏõåÎìú Ï∂îÏ∂ú`);
            const extractedData = await this.extractTopKeywordsFromDB(query);
            const topKeywords = extractedData.keywords;
            const keywordsWithRank = extractedData.keywordsWithRank;
            if (topKeywords.length === 0) {
                console.warn('‚ö†Ô∏è Ï∂îÏ∂úÎêú ÌÇ§ÏõåÎìúÍ∞Ä ÏóÜÏäµÎãàÎã§. ÏõêÎ≥∏ ÌÇ§ÏõåÎìúÎßå ÏÇ¨Ïö©Ìï©ÎãàÎã§.');
            }
            console.log(`üåê Phase 4: ÎÑ§Ïù¥Î≤Ñ API Ìò∏Ï∂ú ÏãúÏûë`);
            console.log(`üìû API Ìò∏Ï∂ú 1: ÏõêÎ≥∏ ÌÇ§ÏõåÎìú "${query}" (ÌÜµÌï© Îç∞Ïù¥ÌÑ∞ + ÏΩòÌÖêÏ∏† Ïàò)`);
            const [originalKeywordApiResult, contentCountsResult] = await Promise.all([
                this.naverApiService.getIntegratedData(query),
                this.naverApiService.getContentCounts(query)
            ]);
            let firstBatchApiResult = null;
            let secondBatchApiResult = null;
            let firstBatchDemographicData = null;
            let secondBatchDemographicData = null;
            if (topKeywords.length > 0) {
                const firstBatch = topKeywords.slice(0, 5);
                if (firstBatch.length > 0) {
                    console.log(`üìû API Ìò∏Ï∂ú 2: Ï≤´ Î≤àÏß∏ Î∞∞Ïπò ÌÇ§ÏõåÎìú ${firstBatch.length}Í∞ú - ${firstBatch.join(', ')}`);
                    const keywordGroups1 = firstBatch.map((keyword, index) => ({
                        groupName: `ÌÇ§ÏõåÎìú${index + 1}`,
                        keywords: [keyword],
                    }));
                    const [generalResult, genderResult, deviceResult, ageResult] = await Promise.all([
                        this.naverApiService.getDatalab({
                            startDate: this.appConfig.defaultStartDate,
                            endDate: this.appConfig.defaultEndDate,
                            timeUnit: 'month',
                            keywordGroups: keywordGroups1,
                        }),
                        this.naverApiService.getDatalab({
                            startDate: this.appConfig.defaultStartDate,
                            endDate: this.appConfig.defaultEndDate,
                            timeUnit: 'month',
                            category: 'gender',
                            keywordGroups: keywordGroups1,
                        }).catch(error => {
                            console.warn(`‚ö†Ô∏è Ï≤´ Î≤àÏß∏ Î∞∞Ïπò ÏÑ±Î≥Ñ Îç∞Ïù¥ÌÑ∞ ÏàòÏßë Ïã§Ìå®:`, error.message);
                            return null;
                        }),
                        this.naverApiService.getDatalab({
                            startDate: this.appConfig.defaultStartDate,
                            endDate: this.appConfig.defaultEndDate,
                            timeUnit: 'month',
                            category: 'device',
                            keywordGroups: keywordGroups1,
                        }).catch(error => {
                            console.warn(`‚ö†Ô∏è Ï≤´ Î≤àÏß∏ Î∞∞Ïπò ÎîîÎ∞îÏù¥Ïä§ Îç∞Ïù¥ÌÑ∞ ÏàòÏßë Ïã§Ìå®:`, error.message);
                            return null;
                        }),
                        this.naverApiService.getDatalab({
                            startDate: this.appConfig.defaultStartDate,
                            endDate: this.appConfig.defaultEndDate,
                            timeUnit: 'month',
                            category: 'age',
                            keywordGroups: keywordGroups1,
                        }).catch(error => {
                            console.warn(`‚ö†Ô∏è Ï≤´ Î≤àÏß∏ Î∞∞Ïπò Ïó∞Î†π Îç∞Ïù¥ÌÑ∞ ÏàòÏßë Ïã§Ìå®:`, error.message);
                            return null;
                        }),
                    ]);
                    firstBatchApiResult = generalResult;
                    firstBatchDemographicData = {
                        gender: genderResult,
                        device: deviceResult,
                        age: ageResult,
                    };
                    console.log(`‚úÖ Ï≤´ Î≤àÏß∏ Î∞∞Ïπò Îç∞Ïù¥ÌÑ∞ ÏàòÏßë ÏôÑÎ£å - ÏùºÎ∞ò: ${generalResult ? 'ÏÑ±Í≥µ' : 'Ïã§Ìå®'}, ÏÑ±Î≥Ñ: ${genderResult ? 'ÏÑ±Í≥µ' : 'Ïã§Ìå®'}, ÎîîÎ∞îÏù¥Ïä§: ${deviceResult ? 'ÏÑ±Í≥µ' : 'Ïã§Ìå®'}, Ïó∞Î†π: ${ageResult ? 'ÏÑ±Í≥µ' : 'Ïã§Ìå®'}`);
                }
                const secondBatch = topKeywords.slice(5, 10);
                if (secondBatch.length > 0) {
                    console.log(`üìû API Ìò∏Ï∂ú 3: Îëê Î≤àÏß∏ Î∞∞Ïπò ÌÇ§ÏõåÎìú ${secondBatch.length}Í∞ú - ${secondBatch.join(', ')}`);
                    const keywordGroups2 = secondBatch.map((keyword, index) => ({
                        groupName: `ÌÇ§ÏõåÎìú${index + 6}`,
                        keywords: [keyword],
                    }));
                    const generalResult = await this.naverApiService.getDatalab({
                        startDate: this.appConfig.defaultStartDate,
                        endDate: this.appConfig.defaultEndDate,
                        timeUnit: 'month',
                        keywordGroups: keywordGroups2,
                    });
                    secondBatchApiResult = generalResult;
                    secondBatchDemographicData = null;
                    console.log(`‚úÖ Îëê Î≤àÏß∏ Î∞∞Ïπò Îç∞Ïù¥ÌÑ∞ ÏàòÏßë ÏôÑÎ£å - ÏùºÎ∞ò: ${generalResult ? 'ÏÑ±Í≥µ' : 'Ïã§Ìå®'}`);
                }
            }
            console.log(`‚úÖ ÎÑ§Ïù¥Î≤Ñ API Ìò∏Ï∂ú ÏôÑÎ£å - Ï¥ù ${topKeywords.length > 5 ? 3 : topKeywords.length > 0 ? 2 : 1}Î≤à Ìò∏Ï∂ú`);
            console.log(`üìä Phase 5: ÌÇ§ÏõåÎìú Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±`);
            const relatedKeywordsData = topKeywords.map((keyword, index) => {
                let trendData = null;
                if (index < 5 && firstBatchApiResult?.data?.results) {
                    trendData = firstBatchApiResult.data.results.find((result) => result.title === `ÌÇ§ÏõåÎìú${index + 1}`);
                }
                else if (index >= 5 && secondBatchApiResult?.data?.results) {
                    trendData = secondBatchApiResult.data.results.find((result) => result.title === `ÌÇ§ÏõåÎìú${index + 1}`);
                }
                const latestRatio = trendData?.data?.[trendData.data.length - 1]?.ratio || 0;
                return {
                    keyword,
                    monthlySearchVolume: latestRatio,
                    rankPosition: index + 1,
                    trendData: trendData?.data || []
                };
            });
            const enhancedNaverApiData = {
                ...originalKeywordApiResult.data,
                demographicData: {
                    firstBatch: firstBatchDemographicData,
                    secondBatch: secondBatchDemographicData,
                }
            };
            const analysisData = await this.keywordAnalysisService.analyzeKeyword(query, undefined, enhancedNaverApiData, relatedKeywordsData);
            const executionTime = (Date.now() - startTime) / 1000;
            console.log(`‚úÖ ÏÉàÎ°úÏö¥ ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÏôÑÎ£å: ${query} (${executionTime}Ï¥à)`);
            return {
                success: true,
                data: {
                    query,
                    naverApiData: {
                        original: originalKeywordApiResult.data,
                        firstBatch: firstBatchApiResult?.data || null,
                        secondBatch: secondBatchApiResult?.data || null,
                        demographicData: {
                            firstBatch: firstBatchDemographicData,
                            secondBatch: secondBatchDemographicData,
                        },
                    },
                    contentCounts: contentCountsResult.data,
                    scrapingData: scrapingResult,
                    analysisData,
                    topKeywords,
                    keywordsWithRank,
                    executionTime,
                    timestamp: new Date().toISOString(),
                },
                message: 'ÌÇ§ÏõåÎìú Î∂ÑÏÑù ÏõåÌÅ¨ÌîåÎ°úÏö∞Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.',
            };
        }
        catch (error) {
            const executionTime = (Date.now() - startTime) / 1000;
            console.error('‚ùå ÏõåÌÅ¨ÌîåÎ°úÏö∞ Ïã§Ìñâ Ïã§Ìå®:', error);
            return {
                success: false,
                data: {
                    query,
                    naverApiData: null,
                    scrapingData: null,
                    analysisData: null,
                    topKeywords: [],
                    keywordsWithRank: [],
                    executionTime,
                    timestamp: new Date().toISOString(),
                },
                message: `ÏõåÌÅ¨ÌîåÎ°úÏö∞ Ïã§Ìñâ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${error.message}`,
            };
        }
    }
    async extractTopKeywordsFromDB(query) {
        try {
            const savedData = await this.keywordAnalysisService.getScrapedKeywords(query);
            if (!savedData || savedData.length === 0) {
                return { keywords: [], keywordsWithRank: [] };
            }
            const smartblockItems = savedData
                .filter(item => item.category === 'smartblock' && item.rankPosition >= 1 && item.rankPosition <= 5)
                .sort((a, b) => a.rankPosition - b.rankPosition);
            const relatedSearchItems = savedData
                .filter(item => item.category === 'related_search' && item.rankPosition >= 1 && item.rankPosition <= 5)
                .sort((a, b) => a.rankPosition - b.rankPosition);
            const topKeywordsWithRank = [...smartblockItems];
            if (topKeywordsWithRank.length < 5) {
                const remainingSlots = 5 - topKeywordsWithRank.length;
                const additionalItems = relatedSearchItems
                    .filter(item => !topKeywordsWithRank.some(existing => existing.keyword === item.keyword))
                    .slice(0, remainingSlots);
                topKeywordsWithRank.push(...additionalItems);
            }
            const finalKeywordsWithRank = topKeywordsWithRank.slice(0, 5);
            const keywords = finalKeywordsWithRank.map(item => item.keyword);
            const keywordsWithRank = finalKeywordsWithRank.map(item => ({
                keyword: item.keyword,
                originalRank: item.rankPosition,
                category: item.category,
                source: item.category === 'smartblock' ? 'naver_smartblock' : 'naver_related_search',
            }));
            console.log(`üéØ Ï∂îÏ∂úÎêú ÏÉÅÏúÑ ÌÇ§ÏõåÎìú: ${keywords.join(', ')}`);
            return { keywords, keywordsWithRank };
        }
        catch (error) {
            console.error('‚ùå DBÏóêÏÑú ÌÇ§ÏõåÎìú Ï∂îÏ∂ú Ïã§Ìå®:', error);
            return { keywords: [], keywordsWithRank: [] };
        }
    }
    async executeQuickAnalysis(query) {
        const startTime = Date.now();
        console.log(`‚ö° Îπ†Î•∏ Î∂ÑÏÑù ÏãúÏûë: ${query}`);
        try {
            const naverApiResult = await this.naverApiService.getIntegratedData(query);
            const executionTime = (Date.now() - startTime) / 1000;
            console.log(`‚úÖ Îπ†Î•∏ Î∂ÑÏÑù ÏôÑÎ£å: ${query} (${executionTime}Ï¥à)`);
            return {
                success: true,
                data: {
                    query,
                    naverApiData: naverApiResult.data,
                    scrapingData: null,
                    analysisData: null,
                    topKeywords: [],
                    keywordsWithRank: [],
                    executionTime,
                    timestamp: new Date().toISOString(),
                },
                message: 'Îπ†Î•∏ ÌÇ§ÏõåÎìú Î∂ÑÏÑùÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.',
            };
        }
        catch (error) {
            const executionTime = (Date.now() - startTime) / 1000;
            console.error('‚ùå Îπ†Î•∏ Î∂ÑÏÑù Ïã§Ìå®:', error);
            return {
                success: false,
                data: {
                    query,
                    naverApiData: null,
                    scrapingData: null,
                    analysisData: null,
                    topKeywords: [],
                    keywordsWithRank: [],
                    executionTime,
                    timestamp: new Date().toISOString(),
                },
                message: `Îπ†Î•∏ Î∂ÑÏÑù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${error.message}`,
            };
        }
    }
    async executeScrapingOnly(query) {
        const startTime = Date.now();
        console.log(`üï∑Ô∏è Ïä§ÌÅ¨ÎûòÌïë Ï†ÑÏö© ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÏãúÏûë: ${query}`);
        try {
            const scrapingResult = await this.scrapingService.scrapeKeywords({
                query,
                types: ['trending', 'smartblock'],
                maxResults: this.appConfig.scrapingMaxResults * 2,
            });
            const executionTime = (Date.now() - startTime) / 1000;
            console.log(`‚úÖ Ïä§ÌÅ¨ÎûòÌïë Ï†ÑÏö© ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÏôÑÎ£å: ${query} (${executionTime}Ï¥à)`);
            return {
                success: true,
                data: {
                    query,
                    naverApiData: null,
                    scrapingData: scrapingResult,
                    analysisData: null,
                    topKeywords: [],
                    keywordsWithRank: [],
                    executionTime,
                    timestamp: new Date().toISOString(),
                },
                message: 'ÌÇ§ÏõåÎìú Ïä§ÌÅ¨ÎûòÌïëÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.',
            };
        }
        catch (error) {
            const executionTime = (Date.now() - startTime) / 1000;
            console.error('‚ùå Ïä§ÌÅ¨ÎûòÌïë ÏõåÌÅ¨ÌîåÎ°úÏö∞ Ïã§Ìå®:', error);
            return {
                success: false,
                data: {
                    query,
                    naverApiData: null,
                    scrapingData: null,
                    analysisData: null,
                    topKeywords: [],
                    keywordsWithRank: [],
                    executionTime,
                    timestamp: new Date().toISOString(),
                },
                message: `Ïä§ÌÅ¨ÎûòÌïë ÏõåÌÅ¨ÌîåÎ°úÏö∞ Ïã§Ìñâ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${error.message}`,
            };
        }
    }
    async checkWorkflowHealth() {
        console.log('üîç ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÏÉÅÌÉú Ï≤¥ÌÅ¨ ÏãúÏûë');
        const healthChecks = await Promise.allSettled([
            this.naverApiService.getIntegratedData('ÌÖåÏä§Ìä∏').catch(() => false),
            this.scrapingService.getScrapingStats().catch(() => false),
            this.keywordAnalysisService.getKeywordAnalysis('ÌÖåÏä§Ìä∏').catch(() => false),
        ]);
        const naverApi = healthChecks[0].status === 'fulfilled' && healthChecks[0].value !== false;
        const scraping = healthChecks[1].status === 'fulfilled' && healthChecks[1].value !== false;
        const analysis = healthChecks[2].status === 'fulfilled' && healthChecks[2].value !== false;
        const overall = naverApi && scraping && analysis;
        console.log(`üìä ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÏÉÅÌÉú: API(${naverApi}), Ïä§ÌÅ¨ÎûòÌïë(${scraping}), Î∂ÑÏÑù(${analysis}), Ï†ÑÏ≤¥(${overall})`);
        return {
            naverApi,
            scraping,
            analysis,
            overall,
        };
    }
};
exports.WorkflowService = WorkflowService;
exports.WorkflowService = WorkflowService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [naver_api_service_1.NaverApiService,
        scraping_service_1.ScrapingService,
        keyword_analysis_service_1.KeywordAnalysisService,
        app_config_1.AppConfigService])
], WorkflowService);
//# sourceMappingURL=workflow.service.js.map