---
description: Frontend 공통 개발 규칙 및 아키텍처 가이드
globs:
alwaysApply: true
---

# Frontend 공통 개발 규칙

## 🎯 핵심 요구사항

### 기본 구조
- **새로운 기능 추가 시 반드시 기능명으로 폴더를 만들 것**
- **Next.js App Router 방식 사용하고 컴포넌트 방식으로 구조를 짤 것**
- **유지보수가 용이하게 기능명 폴더에 styles.ts, index.tsx로 코드를 분리할 것**

### 아키텍처 분리 원칙
- **API 통신 함수**: `commons/apis/` (전역 재사용) 또는 `components/[Feature]/apis/` (기능별 전용)
- **상태 관리 훅**: `commons/hooks/` (전역 재사용) 또는 `components/[Feature]/hooks/` (기능별 전용)  
- **타입 정의**: `commons/types/` (전역 공유) 또는 `components/[Feature]/types/` (기능별 전용)
- **컴포넌트**: `commons/components/` (전역 재사용) 또는 `components/[Feature]/` (기능별 특화)

### 개발 순서
1. **기능을 신규로 구현하기 전에 이미 만들어진 코드가 있는지 확인하고, 있다면 재사용할 것**
2. **타입 정의 우선 작성** (Type-First Development)
3. **API 함수 작성** (적절한 위치에 배치)
4. **훅 작성** (상태 관리와 비즈니스 로직 분리)
5. **컴포넌트 작성** (명확한 Props와 책임 정의)

## 🚫 금지사항
- `any` 타입 사용 금지
- 직접적인 axios 사용 금지 (commons/apis 사용)
- 인라인 스타일 사용 금지 (styles.ts 사용)
- 절대 경로 없는 상대 경로 금지 (`@/` alias 사용)
- **요청한 폴더 혹은 파일 외에 다른 기능의 코드를 수정하지 말 것**

## 📋 상세 가이드
더 자세한 아키텍처 가이드는 `frontend-architecture.mdc` 참조

